import numpy as np
import urllib.request

# -----------------------------
# Load Iris dataset manually (CSV from UCI repository)
# -----------------------------
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
urllib.request.urlretrieve(url, "iris.data")

# Read data
data = []
with open("iris.data", "r") as f:
    for line in f:
        if line.strip():
            parts = line.strip().split(",")
            features = list(map(float, parts[:4]))
            label = parts[4]
            data.append(features + [label])

data = np.array(data, dtype=object)

# Features and labels
X = np.array(data[:, :4], dtype=float)
labels = data[:, 4]

# Map species to numbers
classes = np.unique(labels)
label_to_int = {cls: i for i, cls in enumerate(classes)}
y = np.array([label_to_int[l] for l in labels])

# One-hot encode labels
y_onehot = np.zeros((y.size, len(classes)))
y_onehot[np.arange(y.size), y] = 1

# -----------------------------
# Train-Test Split (80-20)
# -----------------------------
np.random.seed(42)
indices = np.random.permutation(len(X))
train_size = int(0.8 * len(X))
train_idx, test_idx = indices[:train_size], indices[train_size:]
X_train, X_test = X[train_idx], X[test_idx]
y_train, y_test = y_onehot[train_idx], y[test_idx]

# -----------------------------
# Softmax Regression from scratch
# -----------------------------
def softmax(z):
    exp_z = np.exp(z - np.max(z, axis=1, keepdims=True))  # stability
    return exp_z / np.sum(exp_z, axis=1, keepdims=True)

# Initialize weights
m, n = X_train.shape
k = y_train.shape[1]  # 3 classes
W = np.zeros((n, k))
b = np.zeros((1, k))

# Hyperparameters
lr = 0.01
epochs = 1000

# Gradient Descent
for epoch in range(epochs):
    z = X_train.dot(W) + b
    y_pred = softmax(z)

    grad_W = (1/m) * X_train.T.dot(y_pred - y_train)
    grad_b = (1/m) * np.sum(y_pred - y_train, axis=0, keepdims=True)

    W -= lr * grad_W
    b -= lr * grad_b

# -----------------------------
# Evaluation
# -----------------------------
z_test = X_test.dot(W) + b
y_pred_test = np.argmax(softmax(z_test), axis=1)

accuracy = np.mean(y_pred_test == y_test)
print("Accuracy (NumPy softmax regression):", accuracy)

# -----------------------------
# Predict a sample
# -----------------------------
sample = np.array([[5.1, 3.5, 1.4, 0.2]])  # sepal length, sepal width, petal length, petal width
pred = np.argmax(softmax(sample.dot(W) + b), axis=1)[0]
print("Predicted species for sample:", classes[pred])
